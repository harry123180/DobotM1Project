import cv2
import numpy as np
from PIL import Image

# 定義棋盤格規格
CHECKERBOARD = (17, 12)
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)

# 定義棋盤格 3D 點
objp = np.zeros((1, CHECKERBOARD[0] * CHECKERBOARD[1], 3), np.float32)
objp[0, :, :2] = np.mgrid[0:CHECKERBOARD[0], 0:CHECKERBOARD[1]].T.reshape(-1, 2)
objp = objp * 10  # 單位 10mm
# 相機內參矩陣
K = np.array([
    [5.48972546e+03, 0, 1.28728459e+03],
    [0.0, 5.48928732e+03, 9.41806709e+02],
    [0.0, 0.0, 1.0]
])

# 畸變係數
D = np.array([[-2.71633064e-02, -3.01872792e-01, 4.02247668e-03, -1.81802326e-05, 2.59132126e+00]])


# 單張圖片路徑
image_path = 'C:\\Users\\123\\Documents\\GitHub\\DobotM1Project\\Mycode\\converted_jpgs\\290.jpg'
img = cv2.imread(image_path)

if img is None:
    print("無法讀取圖片，請確認路徑正確。")
else:
     # 校正畸變
    h, w = img.shape[:2]
    #print(h,w)
    #new_camera_matrix, roi = cv2.getOptimalNewCameraMatrix(K, D, (w, h), 0, (w, h))
    
    #undistorted_img = cv2.undistort(img, K, D, None, new_camera_matrix)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    #cv2.imshow("gray",gray)
    cv2.namedWindow('MyWindow', cv2.WINDOW_NORMAL)
    cv2.imshow("MyWindow",gray)
    cv2.waitKey(0)
    

    # 查找棋盤角點
    ret, corners = cv2.findChessboardCorners(gray, CHECKERBOARD, cv2.CALIB_CB_ADAPTIVE_THRESH +
                                             cv2.CALIB_CB_FAST_CHECK + cv2.CALIB_CB_NORMALIZE_IMAGE)

    if ret:
        print("成功檢測到棋盤角點。")
        
        # 優化角點位置
        corners2 = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)

        # 繪製棋盤格角點
        img_with_corners = cv2.drawChessboardCorners(img, CHECKERBOARD, corners2, ret)

        # 在角點上繪製編號
        for idx, corner in enumerate(corners2):
            corner_pos = tuple(corner.ravel().astype(int))
            cv2.putText(img_with_corners, str(idx), corner_pos, cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1, cv2.LINE_AA)

        # 顯示結果
        cv2.namedWindow('Chessboard with Corners', cv2.WINDOW_NORMAL)
        cv2.imshow("Chessboard with Corners", img_with_corners)
        cv2.waitKey(0)

        # 儲存結果圖像
        output_path = "chessboard_with_corners.png"
        cv2.imwrite(output_path, img_with_corners)
        print(f"結果圖像已儲存為: {output_path}")
    else:
        print("未檢測到棋盤角點，請確認圖片是否正確包含棋盤格。")
if cv2.waitKey(1) & 0xFF == ord('q'):
        cv2.destroyAllWindows()
import numpy as np

# 将像素坐标 (u, v) 转换为 NumPy 数组
image_points = np.array([
    [1193.48, 1418.47], [1194.37, 1344.48], [1195.41, 1270.36], [1196.27, 1196.47],
    [1197.29, 1122.29], [1198.15, 1048.27], [1199.24, 974.07], [1200.25, 900.27],
    [1201.18, 826.15], [1202.13, 752.16], [1203.23, 678.07], [1204.24, 604.16],
    [1205.16, 530.08], [1206.16, 456.66], [1207.11, 382.60], [1208.17, 308.93],
    [1209.12, 235.22], [1267.41, 1419.57], [1268.36, 1345.49], [1269.41, 1271.45],
    [1270.43, 1197.43], [1271.24, 1123.26], [1272.30, 1049.22], [1273.24, 975.17],
    [1274.25, 901.27], [1275.16, 827.18], [1276.16, 753.13], [1277.19, 679.10],
    [1278.18, 605.18], [1279.12, 531.14], [1280.12, 457.51], [1281.07, 383.57],
    [1282.06, 309.86], [1283.07, 236.17], [1341.82, 1420.54], [1342.78, 1346.62],
    [1343.69, 1272.42], [1344.61, 1198.42], [1345.71, 1124.31], [1346.57, 1050.16],
    [1347.56, 976.20], [1348.55, 902.16], [1349.46, 828.16], [1350.56, 754.06],
    [1351.52, 679.99], [1352.41, 605.99], [1353.39, 532.02], [1354.32, 458.41],
    [1355.25, 384.49], [1356.34, 310.85], [1357.11, 237.03], [1415.80, 1421.55],
    [1416.69, 1347.48], [1417.71, 1273.45], [1418.69, 1199.36], [1419.75, 1125.30],
    [1420.68, 1051.23], [1421.66, 977.05], [1422.50, 903.18], [1423.57, 829.10],
    [1424.47, 755.01], [1425.41, 681.07], [1426.42, 607.04], [1427.35, 533.11],
    [1428.26, 459.46], [1429.20, 385.57], [1430.07, 311.77], [1431.06, 237.94],
    [1489.81, 1422.53], [1490.76, 1348.52], [1491.73, 1274.42], [1492.81, 1200.40],
    [1493.70, 1126.30], [1494.69, 1052.12], [1495.65, 978.11], [1496.57, 904.17],
    [1497.51, 830.08], [1498.44, 756.06], [1499.43, 681.95], [1500.42, 608.04],
    [1501.27, 534.13], [1502.22, 460.38], [1503.13, 386.47], [1504.08, 312.74],
    [1504.97, 238.96], [1564.12, 1423.43], [1565.06, 1349.47], [1566.14, 1275.37],
    [1567.04, 1201.34], [1568.08, 1127.21], [1569.00, 1053.18], [1569.82, 978.98],
    [1570.87, 905.15], [1571.74, 831.11], [1572.58, 757.02], [1573.65, 683.03],
    [1574.61, 608.93], [1575.57, 535.07], [1576.43, 461.45], [1577.39, 387.47],
    [1578.18, 313.73], [1579.22, 239.85], [1638.05, 1424.44], [1639.07, 1350.33],
    [1640.10, 1276.35], [1641.07, 1202.21], [1641.97, 1128.28], [1643.04, 1054.05],
    [1643.98, 980.02], [1644.84, 906.14], [1645.77, 832.04], [1646.66, 758.02],
    [1647.62, 684.00], [1648.56, 610.00], [1649.40, 536.08], [1650.38, 462.36],
    [1651.20, 388.52], [1652.09, 314.74], [1652.89, 240.95], [1711.95, 1425.36],
    [1713.04, 1351.34], [1713.98, 1277.30], [1715.06, 1203.30], [1715.98, 1129.18],
    [1717.08, 1055.08], [1718.01, 981.06], [1718.94, 907.13], [1719.75, 833.12],
    [1720.61, 758.96], [1721.64, 684.96], [1722.47, 611.07], [1723.35, 536.99],
    [1724.18, 463.38], [1725.24, 389.52], [1725.87, 315.68], [1726.87, 241.89],
    [1785.95, 1426.36], [1786.98, 1352.27], [1788.09, 1278.22], [1789.03, 1204.18],
    [1790.06, 1130.09], [1790.91, 1056.11], [1791.90, 982.01], [1792.82, 908.19],
    [1793.71, 834.14], [1794.67, 760.13], [1795.50, 686.01], [1796.39, 612.10],
    [1797.27, 538.14], [1798.24, 464.43], [1799.00, 390.61], [1799.79, 316.79],
    [1800.52, 243.00], [1860.06, 1427.21], [1861.24, 1353.19], [1862.22, 1279.12],
    [1863.19, 1205.20], [1864.20, 1131.09], [1865.18, 1057.06], [1866.10, 982.87],
    [1867.02, 909.22], [1867.88, 835.05], [1868.77, 761.10], [1869.67, 687.04],
    [1870.57, 613.10], [1871.44, 539.24], [1872.27, 465.49], [1873.15, 391.65],
    [1873.87, 317.84], [1874.78, 243.98], [1934.02, 1428.10], [1935.07, 1354.08],
    [1936.04, 1280.17], [1937.03, 1206.17], [1938.07, 1132.05], [1938.94, 1058.01],
    [1939.97, 983.96], [1940.83, 910.12], [1941.69, 836.20], [1942.59, 762.13],
    [1943.62, 688.12], [1944.36, 614.20], [1945.31, 540.30], [1946.14, 466.57],
    [1946.91, 392.64], [1947.67, 318.95], [1948.47, 245.10], [2007.78, 1428.97],
    [2008.81, 1355.06], [2009.88, 1281.00], [2010.93, 1207.10], [2011.85, 1132.94],
    [2012.88, 1059.05], [2013.65, 984.95], [2014.72, 911.23], [2015.53, 837.10],
    [2016.40, 763.11], [2017.34, 689.16], [2018.20, 615.28], [2019.05, 541.23],
    [2019.87, 467.76], [2020.60, 393.69], [2021.56, 320.09], [2022.32, 246.21]
])


#print("像素點座標形狀:", image_points.shape)
#print("像素點座標數據:\n", image_points)
